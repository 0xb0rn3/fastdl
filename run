#!/usr/bin/env bash

# FastDL Run Script - Interactive Installation & Management System
# Version: 1.0.1
# Author: 0xb0rn3

set -euo pipefail

# Configuration
readonly SCRIPT_NAME="run"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly INSTALL_DIR="/usr/local/bin"
readonly BINARY_NAME="fastdl"
readonly SOURCE_FILE="fastdl.go"
readonly CONFIG_DIR="${HOME}/.config/fastdl"
readonly CACHE_DIR="${HOME}/.cache/fastdl"
readonly DATA_DIR="${HOME}/.local/share/fastdl"
readonly VERSION_FILE="${CONFIG_DIR}/.version"
readonly INSTALL_MARKER="${CONFIG_DIR}/.installed"
readonly BUILD_DIR="${CACHE_DIR}/build"
readonly LOG_FILE="${CONFIG_DIR}/install.log"
readonly REPO_URL="https://github.com/0xb0rn3/fastdl"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# ASCII Art Banner
show_banner() {
    clear
    echo -e "${CYAN}"
    cat << 'EOF'
    ╔═══════════════════════════════════════════════════════════════╗
    ║                                                               ║
    ║   ███████╗ █████╗ ███████╗████████╗██████╗ ██╗              ║
    ║   ██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔══██╗██║              ║
    ║   █████╗  ███████║███████╗   ██║   ██║  ██║██║              ║
    ║   ██╔══╝  ██╔══██║╚════██║   ██║   ██║  ██║██║              ║
    ║   ██║     ██║  ██║███████║   ██║   ██████╔╝███████╗         ║
    ║   ╚═╝     ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═════╝ ╚══════╝         ║
    ║                                                               ║
    ║          High-Performance Download Manager v5.0              ║
    ║                  Powered by Go & Love                        ║
    ╚═══════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# Spinner animation
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar
progress_bar() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    
    printf "\r["
    printf "%0.s█" $(seq 1 $filled)
    printf "%0.s░" $(seq 1 $empty)
    printf "] %3d%%" $percentage
}

# Logging functions
log() {
    echo -e "${GREEN}[+]${NC} $*" | tee -a "${LOG_FILE}"
}

error() {
    echo -e "${RED}[!]${NC} $*" >&2 | tee -a "${LOG_FILE}"
}

warning() {
    echo -e "${YELLOW}[*]${NC} $*" | tee -a "${LOG_FILE}"
}

info() {
    echo -e "${CYAN}[i]${NC} $*" | tee -a "${LOG_FILE}"
}

success() {
    echo -e "${GREEN}[✓]${NC} $*" | tee -a "${LOG_FILE}"
}

# Create directories
setup_directories() {
    mkdir -p "${CONFIG_DIR}"
    mkdir -p "${CACHE_DIR}"
    mkdir -p "${DATA_DIR}"
    mkdir -p "${BUILD_DIR}"
    touch "${LOG_FILE}"
}

# Detect OS and distribution
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS_TYPE="linux"
        
        if [[ -f /etc/os-release ]]; then
            . /etc/os-release
            OS_NAME="$ID"
            OS_VERSION="$VERSION_ID"
            OS_PRETTY="$PRETTY_NAME"
        else
            OS_NAME="unknown"
            OS_VERSION="unknown"
            OS_PRETTY="Unknown Linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS_TYPE="macos"
        OS_NAME="macos"
        OS_VERSION=$(sw_vers -productVersion)
        OS_PRETTY="macOS $OS_VERSION"
    else
        OS_TYPE="unknown"
        OS_NAME="unknown"
        OS_VERSION="unknown"
        OS_PRETTY="Unknown OS"
    fi
    
    OS_ARCH="$(uname -m)"
    case "$OS_ARCH" in
        x86_64) OS_ARCH="amd64" ;;
        aarch64) OS_ARCH="arm64" ;;
        armv7l) OS_ARCH="arm" ;;
        i686) OS_ARCH="386" ;;
    esac
}

# Check if FastDL is installed
is_installed() {
    [[ -f "${INSTALL_MARKER}" ]] && [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]
}

# Get installed version
get_installed_version() {
    if [[ -f "${VERSION_FILE}" ]]; then
        cat "${VERSION_FILE}"
    elif is_installed; then
        "${INSTALL_DIR}/${BINARY_NAME}" version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "unknown"
    else
        echo "none"
    fi
}

# Install system dependencies
install_dependencies() {
    info "Installing system dependencies..."
    
    local packages=""
    local install_cmd=""
    
    case "$OS_NAME" in
        ubuntu|debian)
            packages="build-essential git wget curl golang-go gcc sqlite3"
            install_cmd="apt-get"
            ;;
        fedora|rhel|centos)
            packages="git wget curl golang gcc sqlite"
            install_cmd="dnf"
            ;;
        arch|manjaro)
            packages="base-devel git wget curl go gcc sqlite"
            install_cmd="pacman"
            ;;
        macos)
            packages="go sqlite"
            install_cmd="brew"
            ;;
        *)
            warning "Unknown OS. Please install Go, Git, SQLite, and GCC manually."
            return 1
            ;;
    esac
    
    # Check for sudo
    local sudo_cmd=""
    if [[ $EUID -ne 0 ]]; then
        if command -v sudo &> /dev/null; then
            sudo_cmd="sudo"
        else
            error "Need root privileges to install dependencies"
            return 1
        fi
    fi
    
    case "$install_cmd" in
        apt-get)
            $sudo_cmd apt-get update -qq
            $sudo_cmd apt-get install -y $packages
            ;;
        dnf)
            $sudo_cmd dnf install -y $packages
            ;;
        pacman)
            $sudo_cmd pacman -Sy --noconfirm $packages
            ;;
        brew)
            brew install $packages
            ;;
    esac
    
    success "Dependencies installed"
}

# Check Go installation
check_go() {
    if ! command -v go &> /dev/null; then
        error "Go is not installed!"
        
        read -p "Would you like to install Go automatically? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_go
        else
            error "Please install Go manually from https://golang.org"
            exit 1
        fi
    fi
    
    local go_version=$(go version | awk '{print $3}')
    info "Go version: $go_version"
}

# Install Go
install_go() {
    info "Installing Go..."
    
    local go_version="1.21.5"
    local go_file="go${go_version}.${OS_TYPE}-${OS_ARCH}.tar.gz"
    local go_url="https://go.dev/dl/${go_file}"
    
    cd /tmp
    wget -q --show-progress "$go_url"
    sudo tar -C /usr/local -xzf "$go_file"
    rm "$go_file"
    
    export PATH="/usr/local/go/bin:$PATH"
    echo 'export PATH="/usr/local/go/bin:$PATH"' >> ~/.bashrc
    
    success "Go installed successfully"
}

# Build FastDL
build_fastdl() {
    info "Building FastDL..."
    
    # Check if source file exists
    if [[ ! -f "${SCRIPT_DIR}/${SOURCE_FILE}" ]]; then
        error "Source file ${SOURCE_FILE} not found!"
        return 1
    fi
    
    # Copy source to build directory
    cp "${SCRIPT_DIR}/${SOURCE_FILE}" "${BUILD_DIR}/"
    cd "${BUILD_DIR}"
    
    # Initialize Go module
    info "Initializing Go module..."
    go mod init fastdl 2>/dev/null || true
    
    # Create proper go.mod with exact versions
    info "Setting up dependencies..."
    cat > go.mod << 'EOF'
module fastdl

go 1.21

require (
    github.com/mattn/go-sqlite3 v1.14.22
    golang.org/x/crypto v0.19.0
    golang.org/x/net v0.21.0
    golang.org/x/time v0.5.0
)

require (
    golang.org/x/sys v0.17.0 // indirect
    golang.org/x/term v0.17.0 // indirect
    golang.org/x/text v0.14.0 // indirect
)
EOF
    
    # Download and tidy dependencies
    info "Downloading dependencies..."
    go mod download
    go mod tidy
    
    # Verify dependencies are available
    info "Verifying dependencies..."
    if ! go list -m all &>/dev/null; then
        error "Failed to resolve dependencies"
        return 1
    fi
    
    # Build with optimizations and static linking
    info "Compiling binary..."
    export CGO_ENABLED=1
    export CGO_LDFLAGS="-static"
    
    if ! go build -v -ldflags="-s -w -X main.Version=5.0.0 -extldflags=-static" -tags sqlite_omit_load_extension -o "${BINARY_NAME}" "${SOURCE_FILE}"; then
        error "Build failed! Check the log for details."
        return 1
    fi
    
    if [[ ! -f "${BINARY_NAME}" ]]; then
        error "Binary was not created!"
        return 1
    fi
    
    # Verify binary works
    info "Testing binary..."
    if ! ./"${BINARY_NAME}" version &>/dev/null; then
        warning "Binary created but version check failed"
    fi
    
    # Install binary
    info "Installing binary..."
    if [[ -w "${INSTALL_DIR}" ]]; then
        cp "${BINARY_NAME}" "${INSTALL_DIR}/"
    else
        sudo cp "${BINARY_NAME}" "${INSTALL_DIR}/"
    fi
    sudo chmod 755 "${INSTALL_DIR}/${BINARY_NAME}"
    
    # Create marker files
    echo "5.0.0" > "${VERSION_FILE}"
    touch "${INSTALL_MARKER}"
    
    success "FastDL built and installed successfully!"
}

# First time setup
first_time_setup() {
    show_banner
    
    echo -e "${BOLD}${CYAN}Welcome to FastDL!${NC}"
    echo -e "${WHITE}This appears to be your first time running FastDL.${NC}"
    echo -e "${WHITE}Let's set everything up for you.${NC}\n"
    
    sleep 2
    
    # Step 1: OS Detection
    echo -e "${YELLOW}Step 1/4: Detecting Operating System${NC}"
    detect_os
    info "Detected: $OS_PRETTY ($OS_TYPE/$OS_ARCH)"
    sleep 1
    
    # Step 2: Dependencies
    echo -e "\n${YELLOW}Step 2/4: Installing Dependencies${NC}"
    if ! install_dependencies; then
        error "Failed to install dependencies"
        exit 1
    fi
    check_go
    
    # Step 3: Build
    echo -e "\n${YELLOW}Step 3/4: Building FastDL${NC}"
    if ! build_fastdl; then
        error "Failed to build FastDL"
        echo -e "\n${RED}Build failed. Common solutions:${NC}"
        echo -e "${WHITE}- Ensure you have a stable internet connection${NC}"
        echo -e "${WHITE}- Try running: sudo apt-get install build-essential${NC}"
        echo -e "${WHITE}- Check the log file: ${LOG_FILE}${NC}"
        exit 1
    fi
    
    # Step 4: Configuration
    echo -e "\n${YELLOW}Step 4/4: Initial Configuration${NC}"
    
    # Create default config
    cat > "${CONFIG_DIR}/config.json" << EOF
{
  "max_connections": 32,
  "chunk_size": 4194304,
  "download_dir": "${HOME}/Downloads",
  "enable_daemon": false,
  "daemon_port": 8080,
  "enable_http2": true,
  "resume_enabled": true,
  "verify_checksum": true,
  "user_agent": "FastDL/5.0.0",
  "timeout_seconds": 30,
  "max_retries": 5
}
EOF
    
    success "Configuration created"
    
    echo -e "\n${GREEN}══════════════════════════════════════════════${NC}"
    echo -e "${GREEN}${BOLD}Installation Complete!${NC}"
    echo -e "${GREEN}══════════════════════════════════════════════${NC}\n"
    
    echo -e "${CYAN}FastDL has been successfully installed!${NC}"
    echo -e "${WHITE}You can now use it by running:${NC} ${YELLOW}fastdl${NC}"
    echo -e "${WHITE}Or run this script again for the management menu.${NC}\n"
    
    read -p "Press Enter to continue to the main menu..."
}

# Update FastDL
update_fastdl() {
    show_banner
    
    echo -e "${CYAN}${BOLD}Checking for Updates...${NC}\n"
    
    local current_version=$(get_installed_version)
    echo -e "${WHITE}Current version: ${YELLOW}$current_version${NC}"
    
    # Check for updates from GitHub
    if command -v curl &> /dev/null; then
        local latest_version=$(curl -s "${REPO_URL}/releases/latest" 2>/dev/null | grep -oP '"tag_name": "v\K[^"]+' || echo "$current_version")
    else
        local latest_version="$current_version"
    fi
    
    echo -e "${WHITE}Latest version:  ${GREEN}$latest_version${NC}\n"
    
    if [[ "$current_version" == "$latest_version" ]]; then
        success "FastDL is already up to date!"
        sleep 2
        return
    fi
    
    read -p "Update available! Would you like to update now? (y/n) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info "Updating FastDL..."
        
        # Backup current binary
        if [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
            sudo cp "${INSTALL_DIR}/${BINARY_NAME}" "${INSTALL_DIR}/${BINARY_NAME}.backup"
        fi
        
        # Rebuild with latest source
        build_fastdl
        
        success "FastDL updated successfully!"
        sleep 2
    fi
}

# Reinstall FastDL
reinstall_fastdl() {
    show_banner
    
    echo -e "${YELLOW}${BOLD}Reinstall FastDL${NC}\n"
    echo -e "${WHITE}This will remove the current installation and install fresh.${NC}"
    
    read -p "Are you sure you want to reinstall? (y/n) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return
    fi
    
    # Remove old installation
    info "Removing old installation..."
    if [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
        sudo rm -f "${INSTALL_DIR}/${BINARY_NAME}"
    fi
    rm -f "${INSTALL_MARKER}"
    rm -f "${VERSION_FILE}"
    
    # Clean build directory
    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}"
    
    # Reinstall
    info "Reinstalling FastDL..."
    build_fastdl
    
    success "FastDL reinstalled successfully!"
    sleep 2
}

# Configure FastDL
configure_fastdl() {
    show_banner
    
    echo -e "${CYAN}${BOLD}FastDL Configuration${NC}\n"
    
    local config_file="${CONFIG_DIR}/config.json"
    
    if [[ ! -f "$config_file" ]]; then
        warning "Config file not found. Creating default configuration..."
        "${INSTALL_DIR}/${BINARY_NAME}" config -reset 2>/dev/null || true
    fi
    
    echo -e "${WHITE}1)${NC} Edit configuration interactively"
    echo -e "${WHITE}2)${NC} View current configuration"
    echo -e "${WHITE}3)${NC} Reset to defaults"
    echo -e "${WHITE}4)${NC} Set download directory"
    echo -e "${WHITE}5)${NC} Set connection limit"
    echo -e "${WHITE}6)${NC} Configure rate limiting"
    echo -e "${WHITE}0)${NC} Back to main menu\n"
    
    read -p "Select option: " choice
    
    case $choice in
        1)
            "${INSTALL_DIR}/${BINARY_NAME}" config -edit || true
            ;;
        2)
            "${INSTALL_DIR}/${BINARY_NAME}" config -show || cat "$config_file" 2>/dev/null || echo "No config found"
            ;;
        3)
            "${INSTALL_DIR}/${BINARY_NAME}" config -reset || true
            success "Configuration reset to defaults"
            ;;
        4)
            read -p "Enter download directory: " dir
            "${INSTALL_DIR}/${BINARY_NAME}" config -set "download_dir=$dir" || true
            success "Download directory set to: $dir"
            ;;
        5)
            read -p "Enter max connections (1-128): " conn
            "${INSTALL_DIR}/${BINARY_NAME}" config -set "max_connections=$conn" || true
            success "Max connections set to: $conn"
            ;;
        6)
            read -p "Enter rate limit in MB/s (0 for unlimited): " rate
            rate_bytes=$((rate * 1024 * 1024))
            "${INSTALL_DIR}/${BINARY_NAME}" config -set "rate_limit=$rate_bytes" || true
            success "Rate limit set to: ${rate} MB/s"
            ;;
    esac
    
    echo
    read -p "Press Enter to continue..."
}

# Launch FastDL
launch_fastdl() {
    show_banner
    
    echo -e "${CYAN}${BOLD}Launch FastDL${NC}\n"
    
    echo -e "${WHITE}1)${NC} Interactive TUI Mode ${GREEN}[Recommended]${NC}"
    echo -e "${WHITE}2)${NC} Start Daemon with Web UI"
    echo -e "${WHITE}3)${NC} Quick Download (Enter URL)"
    echo -e "${WHITE}4)${NC} Batch Download (From file)"
    echo -e "${WHITE}5)${NC} Command Line Mode"
    echo -e "${WHITE}0)${NC} Back to main menu\n"
    
    read -p "Select option: " choice
    
    case $choice in
        1)
            "${INSTALL_DIR}/${BINARY_NAME}" tui || "${INSTALL_DIR}/${BINARY_NAME}" || true
            ;;
        2)
            echo -e "\n${INFO}Starting daemon on port 8080...${NC}"
            echo -e "${WHITE}Web UI will be available at: ${CYAN}http://localhost:8080${NC}\n"
            "${INSTALL_DIR}/${BINARY_NAME}" daemon || true
            ;;
        3)
            read -p "Enter URL to download: " url
            if [[ -n "$url" ]]; then
                "${INSTALL_DIR}/${BINARY_NAME}" download "$url" || true
            fi
            ;;
        4)
            read -p "Enter path to URL list file: " file
            if [[ -f "$file" ]]; then
                "${INSTALL_DIR}/${BINARY_NAME}" batch "$file" || true
            else
                error "File not found: $file"
            fi
            ;;
        5)
            echo -e "\n${WHITE}Entering command line mode...${NC}"
            echo -e "${WHITE}Type 'exit' to return to menu${NC}\n"
            while true; do
                read -p "fastdl> " cmd
                if [[ "$cmd" == "exit" ]]; then
                    break
                fi
                "${INSTALL_DIR}/${BINARY_NAME}" $cmd || true
            done
            ;;
    esac
}

# System info
show_system_info() {
    show_banner
    
    echo -e "${CYAN}${BOLD}System Information${NC}\n"
    
    detect_os
    
    echo -e "${WHITE}Operating System:${NC} $OS_PRETTY"
    echo -e "${WHITE}Architecture:${NC} $OS_ARCH"
    echo -e "${WHITE}Hostname:${NC} $(hostname)"
    echo -e "${WHITE}User:${NC} $USER"
    echo -e "${WHITE}Home Directory:${NC} $HOME"
    echo
    
    echo -e "${CYAN}${BOLD}FastDL Information${NC}\n"
    
    echo -e "${WHITE}Version:${NC} $(get_installed_version)"
    echo -e "${WHITE}Install Directory:${NC} $INSTALL_DIR"
    echo -e "${WHITE}Config Directory:${NC} $CONFIG_DIR"
    echo -e "${WHITE}Cache Directory:${NC} $CACHE_DIR"
    echo -e "${WHITE}Data Directory:${NC} $DATA_DIR"
    
    if is_installed; then
        echo -e "${WHITE}Status:${NC} ${GREEN}Installed${NC}"
        
        # Show binary info
        if [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
            local size=$(du -h "${INSTALL_DIR}/${BINARY_NAME}" | cut -f1)
            echo -e "${WHITE}Binary Size:${NC} $size"
        fi
    else
        echo -e "${WHITE}Status:${NC} ${RED}Not Installed${NC}"
    fi
    
    echo
    
    # Show FastDL features
    if is_installed; then
        "${INSTALL_DIR}/${BINARY_NAME}" info 2>/dev/null || echo "Info command not available"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Uninstall FastDL
uninstall_fastdl() {
    show_banner
    
    echo -e "${RED}${BOLD}Uninstall FastDL${NC}\n"
    echo -e "${WHITE}This will remove FastDL from your system.${NC}"
    
    read -p "Are you sure you want to uninstall? (y/n) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return
    fi
    
    info "Uninstalling FastDL..."
    
    # Remove binary
    if [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
        sudo rm -f "${INSTALL_DIR}/${BINARY_NAME}"
        success "Binary removed"
    fi
    
    # Ask about config/data removal
    read -p "Remove configuration and data files? (y/n) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "${CONFIG_DIR}"
        rm -rf "${CACHE_DIR}"
        rm -rf "${DATA_DIR}"
        success "Configuration and data removed"
    fi
    
    success "FastDL has been uninstalled"
    sleep 2
}

# Main menu
main_menu() {
    while true; do
        show_banner
        
        if is_installed; then
            local version=$(get_installed_version)
            echo -e "${GREEN}Status: Installed (v$version)${NC}\n"
        else
            echo -e "${YELLOW}Status: Not Installed${NC}\n"
        fi
        
        echo -e "${CYAN}${BOLD}Main Menu${NC}\n"
        
        if is_installed; then
            echo -e "${WHITE}1)${NC} Launch FastDL"
            echo -e "${WHITE}2)${NC} Configure FastDL"
            echo -e "${WHITE}3)${NC} Update FastDL"
            echo -e "${WHITE}4)${NC} Reinstall FastDL"
            echo -e "${WHITE}5)${NC} System Information"
            echo -e "${WHITE}6)${NC} Uninstall FastDL"
        else
            echo -e "${WHITE}1)${NC} Install FastDL"
            echo -e "${WHITE}2)${NC} System Information"
        fi
        
        echo -e "${WHITE}0)${NC} Exit\n"
        
        read -p "Select option: " choice
        
        if is_installed; then
            case $choice in
                1) launch_fastdl ;;
                2) configure_fastdl ;;
                3) update_fastdl ;;
                4) reinstall_fastdl ;;
                5) show_system_info ;;
                6) uninstall_fastdl ;;
                0) exit 0 ;;
                *) error "Invalid option" ; sleep 1 ;;
            esac
        else
            case $choice in
                1) first_time_setup ;;
                2) show_system_info ;;
                0) exit 0 ;;
                *) error "Invalid option" ; sleep 1 ;;
            esac
        fi
    done
}

# Quick launcher for installed FastDL
quick_launch() {
    if ! is_installed; then
        first_time_setup
    else
        # If arguments provided, pass to fastdl directly
        if [[ $# -gt 0 ]]; then
            exec "${INSTALL_DIR}/${BINARY_NAME}" "$@"
        else
            # Otherwise show menu
            main_menu
        fi
    fi
}

# Main execution
main() {
    setup_directories
    
    # If called with arguments and FastDL is installed, pass through
    if [[ $# -gt 0 ]] && is_installed; then
        exec "${INSTALL_DIR}/${BINARY_NAME}" "$@"
    else
        # Show interactive menu
        main_menu
    fi
}

# Trap for cleanup
trap 'echo -e "\n${YELLOW}Interrupted. Cleaning up...${NC}"; exit 130' INT TERM

# Run main
main "$@"
